{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","componentDidMount","a","fetch","response","json","responseJson","setState","prevState","cargando","datos","console","log","state","covid19","this","className","Container","textAlign","Header","as","icon","Icon","name","Subheader","Divider","Loader","active","inline","size","Card","Group","centered","Content","cases","todayCases","deaths","todayDeaths","recovered","critical","href","rel","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2VAsGeA,G,gEA9Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,kBATmB,sBASC,8BAAAC,EAAA,sEACGC,MAAM,iDADT,cACdC,EADc,gBAEOA,EAASC,OAFhB,OAEdC,EAFc,OAIlB,EAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1BC,UAAWD,EAAUC,SACrBC,MAAOJ,MAGTK,QAAQC,IAAIN,GATM,2CANlB,EAAKO,MAAQ,CACXH,MAAO,KACPD,UAAU,GALK,E,qDAsBT,IAIOK,EAJR,EAEqBC,KAAKF,MAAzBH,EAFD,EAECA,MAAOD,EAFR,EAEQA,SA0Cf,OACE,yBAAKO,UAAU,aACb,kBAACC,EAAA,EAAD,CAAWC,UAAU,UACnB,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAI,EAACH,UAAU,UAC7B,kBAACI,EAAA,EAAD,CAAMC,KAAK,cADb,qBAGE,kBAACJ,EAAA,EAAOK,UAAR,yBACmB,uCADnB,OACsC,wCADtC,yBAC4E,kDAG9E,kBAACC,EAAA,EAAD,MACChB,EAAW,kBAACiB,EAAA,EAAD,CAAQC,QAAM,EAACC,OAAO,WAAWC,KAAK,WAAtC,gBAnDHf,EAmDiFJ,EAlD9F,kBAACoB,EAAA,EAAKC,MAAN,CAAYC,UAAQ,GAClB,kBAACF,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,mCAA+BL,EAAQoB,SAG3C,kBAACJ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,+BAA2BL,EAAQqB,cAGvC,kBAACL,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,qCAAiCL,EAAQsB,UAG7C,kBAACN,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,iCAA6BL,EAAQuB,eAGzC,kBAACP,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,uCAAmCL,EAAQwB,aAG/C,kBAACR,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,mCAA+BL,EAAQa,UAG3C,kBAACG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKG,QAAN,KACE,kBAACH,EAAA,EAAKX,OAAN,oCAAgCL,EAAQyB,cAkB1C,kBAACd,EAAA,EAAD,MACA,kBAACR,EAAA,EAAD,CAAWC,UAAU,UACnB,sCACU,uBAAGsB,KAAK,6CAA6CC,IAAI,sBAAsBC,OAAO,UAAtF,sBAEV,2EACsC,uCADtC,KACuD,uBAAGD,IAAI,sBAAsBD,KAAK,6BAA6BE,OAAO,UAAtE,+BAEvD,oC,GAvFMC,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.570ddc24.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Container,\n  Card, Divider, Header, Icon, Loader\n} from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\nimport './App.css'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      datos: null,\n      cargando: true\n    }\n  }\n\n  componentDidMount = async () => {\n    let response = await fetch('https://corona.lmao.ninja/countries/Venezuela');\n    let responseJson = await response.json()\n\n    this.setState(prevState => ({ \n      cargando: !prevState.cargando,\n      datos: responseJson\n    }))\n\n    console.log(responseJson);\n      \n  }\n  \n  render() {\n\n    const { datos, cargando } = this.state;\n\n    const Cards = (covid19) => (\n      <Card.Group centered >\n        <Card>\n          <Card.Content>\n            <Card.Header>Casos Totales ðŸ¤’ {covid19.cases}</Card.Header>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Casos Hoy ðŸ”¥ {covid19.todayCases}</Card.Header>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Muertos Totales ðŸ˜¢ {covid19.deaths}</Card.Header>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Muertos Hoy ðŸ˜­ {covid19.todayDeaths}</Card.Header>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Casos Recuperados ðŸ’ƒ {covid19.recovered}</Card.Header>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Casos Activos ðŸ˜· {covid19.active}</Card.Header>\n          </Card.Content>\n        </Card>\n        <Card>\n          <Card.Content>\n            <Card.Header>Casos Criticos ðŸ¤§ {covid19.critical}</Card.Header>\n          </Card.Content>\n        </Card>\n      </Card.Group>\n    )\n\n    return (\n      <div className=\"container\">\n        <Container textAlign='center'>\n          <Header as='h2' icon textAlign='center'>\n            <Icon name='heartbeat' />\n            COVID-19 Venezuela\n            <Header.Subheader>\n              Estadisticas del <b>COVID-19</b> en <b>Venezuela</b>, usando la fuente de <b>worldometers.info</b>\n            </Header.Subheader>\n          </Header>\n          <Divider />\n          {cargando ? <Loader active inline='centered' size='massive' >Cargando...</Loader> : Cards(datos) }\n          <Divider/>\n          <Container textAlign='center'>\n            <p>\n              Fuente: <a href=\"https://www.worldometers.info/coronavirus/\" rel=\"noopener noreferrer\" target=\"_blank\">worldometers.info</a>\n            </p>\n            <p>\n              API y mÃ¡s informaciÃ³n tÃ©cnica sobre <b>COVID-19</b>. <a rel=\"noopener noreferrer\" href=\"https://corona.lmao.ninja/\" target=\"_blank\">https://corona.lmao.ninja/</a>\n            </p>\n            <br />\n          </Container>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}